name: PyrogAI updater

on:
  push:
    branches:
      - main

jobs:
  check:
    name: Update pyrogAI
    runs-on: ubuntu-latest

    steps:
      - name: Dump event JSON and environment
        run: cat "$GITHUB_EVENT_PATH"; env

      - name: Check if secret USER_GITHUB_TOKEN is available
        env:
          USER_GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}
        run: |
          if [[ ! $USER_GITHUB_TOKEN ]]; then
              MSG='Secret `USER_GITHUB_TOKEN` was not found.'
              MSG="${MSG} It should be an Organization Secret with scopes \`repo:*\` and"
              MSG="${MSG} \`packages:read\`, and \`Enable SSO\` should be done too."
              MSG="${MSG} Go here - https://github.com/settings/tokens - to create a Personal Access Token."
              MSG="${MSG} See https://github.com/procter-gamble/de-cf-cw for more information."
              echo "::error::${MSG}"
              exit 1
          fi
      - name: Configure USER_GITHUB_TOKEN as default git token on github.com/procter-gamble only
        env:
          USER_GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}
        run: |
          set -e
          git config --global credential.https://github.com/procter-gamble/.helper "! f() { echo username=pgcw; echo password=$USER_GITHUB_TOKEN; }; f"
          echo '::warning::Using USER_GITHUB_TOKEN for git operations on github.com/procter-gamble'
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable Python 3.9
        uses: actions/setup-python@v4.7.1
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install uv
          uv pip install -e .

      - name: Get all releases
        id: get_releases
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/procter-gamble/de-cf-pyrogai/releases
        env:
          GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}

      - name: Extract Latest Release Name
        id: extract_latest_version
        run: |
          RESPONSE=$(curl -H "Authorization: token ${{ secrets.USER_GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3+json" \
                    "https://api.github.com/repos/procter-gamble/de-cf-pyrogai/releases")
          LATEST_RELEASE_TAG=$(echo "$RESPONSE" | jq -r '.[0].tag_name')

          LATEST_RELEASE_VERSION=${LATEST_RELEASE_TAG#v}
          echo "LATEST_RELEASE_VERSION=$LATEST_RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "LATEST_RELEASE_TAG=$LATEST_RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Get Current PyrogAI Version
        id: get_current_version
        run: |
          source .venv/bin/activate
          CURRENT_VERSION=$(pip show pyrogai | grep '^Version:' | awk '{print $2}')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Check if Update is Needed
        id: check_update_needed
        run: |
          if [ "${{ steps.get_current_version.outputs.CURRENT_VERSION }}" == "${{ steps.extract_latest_version.outputs.LATEST_RELEASE_VERSION }}" ]; then
            echo "UPDATE_NEEDED=false" >> $GITHUB_OUTPUT
          else
            echo "UPDATE_NEEDED=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for Existing PR
        if: steps.check_update_needed.outputs.UPDATE_NEEDED == 'true'
        id: check_pr_exists
        env:
          GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          OWNER: ${{ github.repository_owner }}
          LATEST_RELEASE_VERSION: ${{ steps.extract_latest_version.outputs.LATEST_RELEASE_VERSION }}
        run: |
          # Construct the API URL
          API_URL="https://api.github.com/repos/$REPO/pulls?state=open&head=$OWNER:fix/update-pyrogai-$LATEST_RELEASE_VERSION"

          # Make the API request using curl
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$API_URL")

          # Output the response (optional, for debugging)
          echo "API Response:"
          echo "$response"

          # Use jq to parse the response and get the length of the array
          pr_count=$(echo "$response" | jq 'length')

          # Determine if PR exists based on pr_count
          if [[ "$pr_count" -eq 0 ]]; then
            PR_EXISTS="false"
          else
            PR_EXISTS="true"
          fi

          # Set the 'pr_exists' output
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT

      - name: Update PyrogAI
        if: steps.check_pr_exists.outputs.pr_exists == 'false' && steps.check_update_needed.outputs.UPDATE_NEEDED == 'true'
        run: |
          source .venv/bin/activate
          aif self update --version ${{ steps.extract_latest_version.outputs.LATEST_RELEASE_TAG }} --no-prompt --config-module template_pipelines.config
        env:
          USER_GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}

      - name: Checkout all .yml files from .github/workflows/ on main branch
        if: steps.check_pr_exists.outputs.pr_exists == 'false' && steps.check_update_needed.outputs.UPDATE_NEEDED == 'true'
        run: |
          git fetch origin main

          for file in $(git ls-tree --name-only origin/main -- .github/workflows/*.yml); do
              git checkout origin/main -- "$file"
          done

          for file in $(git ls-tree --name-only origin/main -- .github/workflows/*.yaml); do
              git checkout origin/main -- "$file"
          done

          git checkout origin/main -- test/run_pytest_cov.py

      - name: Create Pull Request
        if: steps.check_pr_exists.outputs.pr_exists == 'false' && steps.check_update_needed.outputs.UPDATE_NEEDED == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.USER_GITHUB_TOKEN }}
          commit-message: "Update PyrogAI to v${{ steps.extract_latest_version.outputs.LATEST_RELEASE_VERSION }}"
          title: "AUTO: Update PyrogAI to v${{ steps.extract_latest_version.outputs.LATEST_RELEASE_VERSION }}"
          body: "This PR updates PyrogAI to the latest version."
          branch: "fix/update-pyrogai-${{ steps.extract_latest_version.outputs.LATEST_RELEASE_VERSION }}"
          base: main
